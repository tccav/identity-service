// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package idmocks

import (
	"context"
	"github.com/tccav/identity-service/pkg/domain/identities"
	"sync"
)

// Ensure, that RegisterUseCasesMock does implement identities.RegisterUseCases.
// If this is not the case, regenerate this file with moq.
var _ identities.RegisterUseCases = &RegisterUseCasesMock{}

// RegisterUseCasesMock is a mock implementation of identities.RegisterUseCases.
//
//	func TestSomethingThatUsesRegisterUseCases(t *testing.T) {
//
//		// make and configure a mocked identities.RegisterUseCases
//		mockedRegisterUseCases := &RegisterUseCasesMock{
//			RegisterStudentFunc: func(ctx context.Context, input identities.RegisterStudentInput) (string, error) {
//				panic("mock out the RegisterStudent method")
//			},
//		}
//
//		// use mockedRegisterUseCases in code that requires identities.RegisterUseCases
//		// and then make assertions.
//
//	}
type RegisterUseCasesMock struct {
	// RegisterStudentFunc mocks the RegisterStudent method.
	RegisterStudentFunc func(ctx context.Context, input identities.RegisterStudentInput) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// RegisterStudent holds details about calls to the RegisterStudent method.
		RegisterStudent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input identities.RegisterStudentInput
		}
	}
	lockRegisterStudent sync.RWMutex
}

// RegisterStudent calls RegisterStudentFunc.
func (mock *RegisterUseCasesMock) RegisterStudent(ctx context.Context, input identities.RegisterStudentInput) (string, error) {
	if mock.RegisterStudentFunc == nil {
		panic("RegisterUseCasesMock.RegisterStudentFunc: method is nil but RegisterUseCases.RegisterStudent was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input identities.RegisterStudentInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockRegisterStudent.Lock()
	mock.calls.RegisterStudent = append(mock.calls.RegisterStudent, callInfo)
	mock.lockRegisterStudent.Unlock()
	return mock.RegisterStudentFunc(ctx, input)
}

// RegisterStudentCalls gets all the calls that were made to RegisterStudent.
// Check the length with:
//
//	len(mockedRegisterUseCases.RegisterStudentCalls())
func (mock *RegisterUseCasesMock) RegisterStudentCalls() []struct {
	Ctx   context.Context
	Input identities.RegisterStudentInput
} {
	var calls []struct {
		Ctx   context.Context
		Input identities.RegisterStudentInput
	}
	mock.lockRegisterStudent.RLock()
	calls = mock.calls.RegisterStudent
	mock.lockRegisterStudent.RUnlock()
	return calls
}
